package ut.edu.project.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import ut.edu.project.models.Camping;
import ut.edu.project.services.CampingService;

import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/camping")
public class CampingController {
    @Autowired
    private CampingService campingService;

    // üñ•Ô∏è HI·ªÇN TH·ªä GIAO DI·ªÜN THYMELEAF
    @GetMapping
    public String showCampingList(@RequestParam(required = false) String searchTerm, Model model) {
        // Th√™m searchTerm v√†o model ƒë·ªÉ Thymeleaf c√≥ th·ªÉ s·ª≠ d·ª•ng
        model.addAttribute("searchTerm", searchTerm);

        // L·∫•y danh s√°ch camping v√† th√™m v√†o model
        model.addAttribute("campings", campingService.getAllCampings());

        return "camping"; // Tr·∫£ v·ªÅ file templates/camping.html
    }

    // üìù API: L·∫§Y DANH S√ÅCH CAMPING
    @GetMapping("/api")
    @ResponseBody
    public List<Camping> getAllCampings() {
        return campingService.getAllCampings();
    }

    // üîç API: L·∫§Y CAMPING THEO ID
    @GetMapping("/api/{id}")
    @ResponseBody
    public ResponseEntity<Camping> getCampingById(@PathVariable Long id) {
        Optional<Camping> camping = campingService.getCampingById(id);
        return camping.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    // ‚ûï API: TH√äM CAMPING
    @PostMapping("/api")
    @ResponseBody
    public Camping addCamping(@RequestBody Camping camping) {
        return campingService.addCamping(camping);
    }

    // üîÑ API: C·∫¨P NH·∫¨T CAMPING
    @PutMapping("/api/{id}")
    @ResponseBody
    public ResponseEntity<Camping> updateCamping(@PathVariable Long id, @RequestBody Camping campingDetails) {
        Camping updatedCamping = campingService.updateCamping(id, campingDetails);
        return updatedCamping != null ? ResponseEntity.ok(updatedCamping) : ResponseEntity.notFound().build();
    }

    // ‚ùå API: X√ìA CAMPING
    @DeleteMapping("/api/{id}")
    @ResponseBody
    public ResponseEntity<Void> deleteCamping(@PathVariable Long id) {
        campingService.deleteCamping(id);
        return ResponseEntity.noContent().build();
    }

    // ‚úÖ API: L·∫§Y DANH S√ÅCH CAMPING C√íN CH·ªñ
    @GetMapping("/api/available")
    @ResponseBody
    public List<Camping> getAvailableCampings() {
        return campingService.getAvailableCampings();
    }
}
